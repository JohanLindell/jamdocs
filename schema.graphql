# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
  query: Query
}

interface Node {
  id: ID!
}

interface NodeConnection {
  edges: [NodeConnectionEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

interface NodeConnectionEdge {
  next: Node
  node: Node
  previous: Node
}

type Doc implements Node {
  belongsTo(
    filter: BelongsToFilterInput,
    limit: Int,
    order: SortOrder = DESC,
    page: Int,
    #Defaults to 25 when page is provided.
    perPage: Int,
    skip: Int = 0,
    sort: [SortArgument!],
    sortBy: String = "date"
  ): NodeBelongsTo
  content: String
  date(
    #Date format
    format: String,
    #Locale
    locale: String
  ): Date
  excerpt: String
  fileInfo: Doc_FileInfo
  headings(depth: RemarkHeadingLevels, stripTags: Boolean = true): [RemarkHeading]
  id: ID!
  path(to: String = "default"): String
  slug: String
  timeToRead(
    #Words per minute
    speed: Int = 230
  ): Int
  title: String
}

type DocConnection implements NodeConnection {
  edges: [DocEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type DocEdge implements NodeConnectionEdge {
  next: Doc
  node: Doc
  previous: Doc
}

type Doc_FileInfo {
  directory: String
  extension: String
  name: String
  path: String
}

type Menu implements Node {
  belongsTo(
    filter: BelongsToFilterInput,
    limit: Int,
    order: SortOrder = DESC,
    page: Int,
    #Defaults to 25 when page is provided.
    perPage: Int,
    skip: Int = 0,
    sort: [SortArgument!],
    sortBy: String = "date"
  ): NodeBelongsTo
  id: ID!
  section: String
  topics: [Menu_Topics]
}

type MenuConnection implements NodeConnection {
  edges: [MenuEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type MenuEdge implements NodeConnectionEdge {
  next: Menu
  node: Menu
  previous: Menu
}

type Menu_Topics {
  slug: String
  title: String
}

type Metadata {
  pathPrefix: String
  siteDescription: String
  siteName: String
  siteUrl: String
}

type NodeBelongsTo implements NodeConnection {
  edges: [NodeBelongsToEdge]
  pageInfo: PageInfo!
  totalCount: Int!
}

type NodeBelongsToEdge implements NodeConnectionEdge {
  next: Node
  node: Node
  previous: Node
}

type Page {
  context: JSON!
  path: String!
}

type PageInfo {
  currentPage: Int!
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  isFirst: Boolean!
  isLast: Boolean!
  perPage: Int!
  totalItems: Int!
  totalPages: Int!
}

type Query {
  allDoc(
    #Filter for Doc nodes.
    filter: DocFilterInput,
    limit: Int,
    order: SortOrder = DESC,
    page: Int,
    #Defaults to 25 when page is provided.
    perPage: Int,
    skip: Int = 0,
    sort: [SortArgument],
    sortBy: String = "date"
  ): DocConnection
  allMenu(
    #Filter for Menu nodes.
    filter: MenuFilterInput,
    limit: Int,
    order: SortOrder = DESC,
    page: Int,
    #Defaults to 25 when page is provided.
    perPage: Int,
    skip: Int = 0,
    sort: [SortArgument],
    sortBy: String = "date"
  ): MenuConnection
  allPage(
    #Filter pages.
    filter: PageFilterInput
  ): [Page]
  doc(
    id: ID,
    #Will return an error if not nullable.
    nullable: Boolean = false,
    path: String
  ): Doc
  menu(
    id: ID,
    #Will return an error if not nullable.
    nullable: Boolean = false,
    path: String
  ): Menu
  metaData: Metadata @deprecated(reason : "Use Query.metadata instead.")
  metadata: Metadata
  page(path: String!): Page
}

type RemarkHeading {
  anchor: String
  depth: Int
  value: String
}

enum ImageFit {
  #Embed within both provided dimensions.
  contain
  #Crop to cover both provided dimensions.
  cover
  #Ignore the aspect ratio of the input and stretch to both provided dimensions.
  fill
  #Preserving aspect ratio, resize the image to be as large as possible while ensuring its dimensions are less than or equal to both those specified.
  inside
  #Preserving aspect ratio, resize the image to be as small as possible while ensuring its dimensions are greater than or equal to both those specified. Some of these values are based on the object-fit CSS property.
  outside
}

enum RemarkHeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

enum SortOrder {
  #Sort ascending
  ASC
  #Sort descending
  DESC
}

enum TypeName {
  Doc
  Menu
}

input BelongsToFilterInput {
  id: IDQueryOperatorInput
  path: StringQueryOperatorInput
  typeName: TypeNameQueryOperatorInput
}

input DateQueryOperatorInput {
  "Filter by property between provided values."
  between: [Date]
  "Filter by date property equal to provided date value."
  dteq: Date
  "Filter by property of (strict) equality."
  eq: Date
  "Filter by property greater than provided value."
  gt: Date
  "Filter by property greater or equal to provided value."
  gte: Date
  "Filter by property matching any of the provided values."
  in: [Date]
  "Filter by property less than provided value."
  lt: Date
  "Filter by property less than or equal to provided value."
  lte: Date
  "Filter by property not equal to provided value."
  ne: Date
  "Filter by property not matching any of the provided values."
  nin: [Date]
}

input DocFilterInput {
  content: StringQueryOperatorInput
  date: DateQueryOperatorInput
  excerpt: StringQueryOperatorInput
  fileInfo: Doc_FileInfoFilterInput
  id: IDQueryOperatorInput
  path: StringQueryOperatorInput
  slug: StringQueryOperatorInput
  title: StringQueryOperatorInput
}

input Doc_FileInfoFilterInput {
  directory: StringQueryOperatorInput
  extension: StringQueryOperatorInput
  name: StringQueryOperatorInput
  path: StringQueryOperatorInput
}

input IDQueryOperatorInput {
  "Filter by property of (strict) equality."
  eq: ID
  "Filter by property matching any of the provided values."
  in: [ID]
  "Filter by property not equal to provided value."
  ne: ID
  "Filter by property not matching any of the provided values."
  nin: [ID]
}

input JSONQueryOperatorInput {
  "Filter by property of (strict) equality."
  eq: JSON
  "Filter by property matching any of the provided values."
  in: [JSON]
  "Filter by property not equal to provided value."
  ne: JSON
  "Filter by property not matching any of the provided values."
  nin: [JSON]
  "Filter by property matching provided regular expression."
  regex: String
}

input MenuFilterInput {
  id: IDQueryOperatorInput
  section: StringQueryOperatorInput
  topics: Menu_TopicsFilterInput
}

input Menu_TopicsFilterInput {
  slug: StringQueryOperatorInput
  title: StringQueryOperatorInput
}

input PageFilterInput {
  context: JSONQueryOperatorInput
  path: StringQueryOperatorInput
}

input SortArgument {
  by: String! = "date"
  order: SortOrder = DESC
}

input StringQueryOperatorInput {
  "Filter by property of (strict) equality."
  eq: String
  "Filter by property matching any of the provided values."
  in: [String]
  "Filter by property not equal to provided value."
  ne: String
  "Filter by property not matching any of the provided values."
  nin: [String]
  "Filter by property matching provided regular expression."
  regex: String
}

input TypeNameQueryOperatorInput {
  "Filter by property of (strict) equality."
  eq: TypeName
  "Filter by property matching any of the provided values."
  in: [TypeName]
  "Filter by property not equal to provided value."
  ne: TypeName
  "Filter by property not matching any of the provided values."
  nin: [TypeName]
}


scalar Date

"The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf)."
scalar JSON

scalar File

scalar Image